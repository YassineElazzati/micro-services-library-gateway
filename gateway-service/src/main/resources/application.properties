# Port sur lequel la gateway va écouter (8080 ici, c'est l'entrée principale du projet)
server.port=8080

# Nom de l’application (utile dans les logs, monitoring, etc.)
spring.application.name=gateway-service

# Indique qu’on utilise WebFlux (obligatoire pour que Spring Cloud Gateway fonctionne)
spring.main.web-application-type=reactive

# ============================
# ROUTING DE LA GATEWAY
# ============================

# Route 1 : tout ce qui commence par /api/auteurs/** est redirigé vers le microservice auteur
# Nom unique de la route (juste pour l’identification et les logs)
spring.cloud.gateway.routes[0].id=auteur-service
# Adresse du microservice auteur → la requête sera envoyée ici si le path matche
spring.cloud.gateway.routes[0].uri=http://localhost:8081
# Prédicat : si l’URL commence par /api/auteurs/** → cette route s’active
# Exemple : /api/auteurs/5 va matcher cette règle
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/auteurs/**


# Route 2 : tout ce qui commence par /api/livres/** est aussi redirigé vers le microservice auteur
# (peut être chelou niveau nommage, mais logique si les livres sont gérés côté auteur-service)
spring.cloud.gateway.routes[1].id=livre-auteur-service
spring.cloud.gateway.routes[1].uri=http://localhost:8081
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/livres/**

# Route 3 : tout ce qui commence par /api/clients/** part vers le microservice livre
spring.cloud.gateway.routes[2].id=client-livre-service
spring.cloud.gateway.routes[2].uri=http://localhost:8082
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/clients/**

# Route 4 : tout ce qui commence par /api/commandes/** part aussi vers le microservice livre
spring.cloud.gateway.routes[3].id=commande-livre-service
spring.cloud.gateway.routes[3].uri=http://localhost:8082
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/commandes/**

# ============================
# AUTRES OPTIONS UTILES
# ============================

# On désactive le mapping automatique des ressources statiques (sinon ça interfère avec les routes)
spring.web.resources.add-mappings=false

# On désactive la vérif des templates Thymeleaf (pas utile ici, vu qu’on ne fait pas de rendu côté serveur)
spring.thymeleaf.check-template-location=false

# ============================
# LOGGING (TRÈS UTILE POUR DEBUG)
# ============================

# Affiche plus d’infos sur la config de la gateway dans les logs
logging.level.org.springframework.cloud.gateway=DEBUG

# Affiche les correspondances entre les routes et les requêtes entrantes (ultra pratique pour voir où ça coince)
logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=TRACE
